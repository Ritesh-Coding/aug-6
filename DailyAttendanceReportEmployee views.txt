class DailyAttendanceReportEmployee(viewsets.ModelViewSet):
    authentication_classes = [JWTAuthentication]
    permission_classes = [IsAuthenticated]
    serializer_class = AttendanceSerializer
    filter_backends = [DjangoFilterBackend]
    filterset_fields = ['date']
    pagination_class = CustomPageNumberPagination

    def get_queryset(self):
        start_date = self.request.query_params.get('start_date', None)
        end_date = self.request.query_params.get('end_date', None)
        id = self.request.query_params.get('id', None)

        if self.request.user.is_superuser:
            if id:
                return DailyAttendanceReport.objects.filter(id=id).order_by("-date")
            if start_date and end_date:
                return DailyAttendanceReport.objects.filter(date__range=[start_date, end_date])
            attendance = DailyAttendanceReport.objects.filter(employee_id=self.request.user.id).order_by("-date")
            return attendance
        else:
            if start_date and end_date:
                return DailyAttendanceReport.objects.filter(employee_id=self.request.user.id, date__range=[start_date, end_date]).order_by("-date")
            else:
                return DailyAttendanceReport.objects.filter(employee_id=self.request.user.id).order_by("-date")

    def get_serializer_context(self):
        context = super().get_serializer_context()
        context['start_date'] = self.request.query_params.get('start_date', None)
        context['end_date'] = self.request.query_params.get('end_date', None)
        context['id'] = self.request.query_params.get('id', None)
        return context

    def get_permissions(self):
        if self.request.method in ["POST", "PUT", "PATCH", "DELETE"]:
            self.permission_classes = [permissions.IsAdminUser]
        else:
            self.permission_classes = [permissions.AllowAny]
        return super().get_permissions()
